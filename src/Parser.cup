/*
 * Projet compilation
 *
 * auteurs : BURTEAUX CHAUDOIN MATHIEU NEVES PAPELIER POTIER
 */ 
package fr.ul.miage.exemple.generated;

import fr.ul.miage.exemple.*;
import fr.ul.miage.exemple.Arbre.*;
import fr.ul.miage.exemple.TDS.*;
import java.util.ArrayList;



action code {:
   
   ArrayList<Noeud> listVar_provisoire = new ArrayList<Noeud>();
   
   Arbre arbre_programme = new Arbre(new Noeud("Racine_Programme"));
   
	public void afficher() {
	
		arbre_programme.affiche();		
	}	
	
:};





/* la grammaire */

terminal VAR, NUM, PV, AO, AF, PO, PF, NL, EQ, OP, OPBOOL, VRG, TYPE, RETURN, VOID, COM, IF, ELSE, WHILE;

non terminal prog, blabla, vars, instruction, affect, defVar, defFunc, callFunc, args, defArgs, expression, conditionnelle, condition, iteration;

start with prog;

prog ::= blabla:p {: /*arbre_programme.getRacine().ajouterFils(p);*/ afficher(); :} ;

blabla ::= instruction:i blabla {: if(i != null) arbre_programme.getRacine().ajouterFils(i);  :}
		| COM blabla
		| instruction:i {: arbre_programme.getRacine().ajouterFils(i); :}
		| COM
	;

instruction ::= defVar:dv {: :}
	| defFunc:df {:  :}
	| callFunc:cf PV
	| affect:aff {: RESULT=aff; :}
	| conditionnelle:nif
	| iteration:ite
	| RETURN:ret expression:ex PV
	| NL
	;
	
conditionnelle ::= IF:i PO condition:c PF AO blabla:bla AF {: ((Noeud) i).ajouterFils(c); ((Noeud) i).ajouterFils(bla); RESULT=i;  :}
	| IF:i PO condition:c PF AO blabla:th AF ELSE AO blabla:el AF {: ((Noeud) i).ajouterFils(c); ((Noeud) i).ajouterFils(th); ((Noeud) i).ajouterFils(el); RESULT=i; :}
	;
	
iteration ::= WHILE:w PO condition:c PF AO blabla:bla AF {: ((Noeud) w).ajouterFils(c); ((Noeud) w).ajouterFils(bla); RESULT=w; :}
	;
	
condition ::= expression:ex1 OPBOOL:o expression:ex2 {: ((Noeud) o).ajouterFils(ex1); ((Noeud) o).ajouterFils(ex2); RESULT=o; :}
	;


affect ::= VAR:v EQ:eq expression:e PV {:	
												Noeud n = ((Noeud)eq).copy();
												n.ajouterFils(v);
												n.ajouterFils(e);
												RESULT = n;
										 :}
	;
	


defVar ::= TYPE:t VAR:v vars:vs PV {: Main.tds.addVar(((Noeud)v).valeur, (String) t, 0);
									  for(Noeud n : (ArrayList<Noeud>)vs){
											Main.tds.addVar(((Noeud)n).valeur, (String) t, 0);
									  }  
									:}
	
	| TYPE:t VAR:v vars:vs EQ:eq expression:e PV {:Main.tds.addVar(((Noeud)v).valeur , (String) t, ((Noeud)e).valeur);
													for(Noeud n : (ArrayList<Noeud>)vs){
														Main.tds.addVar(((Noeud)n).valeur , (String) t, ((Noeud)e).valeur);
									  				}
										 		:}
	;
	
	
vars ::= VRG VAR:v vars:vs{: ArrayList<Noeud> l1 = new ArrayList<>();
							l1.add((Noeud)v);
							if(vs!=null) { l1.addAll( (ArrayList)vs); }
							RESULT=l1 ;
							:} | {:System.out.println("note/vars"); RESULT=new ArrayList<Noeud>(); :};
	
	


	


defFunc ::= TYPE:type VAR:fname PO defArgs PF AO blabla AF 
	| VOID VAR PO defArgs PF AO blabla AF
	| TYPE:type VAR:fname PO PF AO blabla:bla AF {: Main.tds.addFunc((String) fname, (String) type); :}
	| VOID VAR PO PF AO blabla AF
	;
	
/*
defFunc ::= TYPE PO defArgs PF AO blabla RETURN expression PV blabla AF
	| VOID VAR PO defArgs PF AO blabla AF
	| TYPE VAR PO PF AO blabla RETURN expression PV blabla AF
	| VOID VAR PO PF AO blabla AF
	;
*/

callFunc ::= VAR PO args PF
	| VAR PO PF
	;

args ::= expression VRG args
	| expression
	;
	
defArgs ::= TYPE VAR
	| TYPE VAR VRG defArgs
	;

expression ::= NUM:n OP:o expression:ex {: ((Noeud) o).ajouterFils(n); ((Noeud) o).ajouterFils(ex); RESULT=o; :}
	| VAR:v OP:o expression:ex {: ((Noeud) o).ajouterFils(v); ((Noeud) o).ajouterFils(ex); RESULT=o; :}
	| callFunc:f OP:o expression:ex {: ((Noeud) o).ajouterFils(f); ((Noeud) o).ajouterFils(ex); RESULT=o; :}
	| NUM:n {: RESULT=n; :}
	| VAR:v {: RESULT=(Noeud)v; :}
	| callFunc:f {: RESULT=f; :}
	| PO expression:ex1 PF OP:o expression:ex2 {: ((Noeud) o).ajouterFils(ex1); ((Noeud) o).ajouterFils(ex2); RESULT=o; :}
	| PO expression:ex PF {: RESULT=ex; :}
	;