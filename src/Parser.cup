/*
 * Projet compilation
 *
 * auteurs : BURTEAUX CHAUDOIN MATHIEU NEVES PAPELIER POTIER
 */ 
package fr.ul.miage.exemple.generated;

import fr.ul.miage.exemple.*;
import fr.ul.miage.exemple.Arbre.*;
import fr.ul.miage.exemple.TDS.*;
import java.util.ArrayList;



action code {:
   
   ArrayList<Noeud> listVar_provisoire = new ArrayList<Noeud>();
   
   Arbre arbre_programme = new Arbre(new Noeud("PROG"));
   
	public void afficher() {
	
		arbre_programme.affiche();		
	}	
	
:};





/* la grammaire */

terminal VAR, NUM, PV, AO, AF, PO, PF, NL, EQ, OPBOOL, VRG, INT, RETURN, VOID, COM, IF, ELSE, WHILE, ADD, MUL;

non terminal prog, membre_const, membre_dyn, atome_dyn, atome_const, blabla, vars, instruction, affect, defVar, defFunc, callFunc, args, defArgs, expr_dyn, expr_const, expression, conditionnelle, condition, iteration;

start with prog;

prog ::= blabla:p {: arbre_programme.getRacine().ajouterFilsDe((Noeud) p); afficher(); :} ;

blabla ::= instruction:i blabla:b {: Noeud bla = new Noeud("bla");
									if(i != null){
										if(i instanceof ArrayList<?>){
											ArrayList<Noeud> l = (ArrayList<Noeud>) i;
											
											for(Noeud n : l){
												bla.ajouterFils(n);
											}
											
										}
										else{
											bla.ajouterFils(i);
										}
									}  
									if(b != null)
										bla.ajouterFilsDe((Noeud) b);
									RESULT=bla;
									:}
		| COM blabla:b {: RESULT=b; :}
		| instruction:i {: 	Noeud bla = new Noeud("bla");
							if(i instanceof ArrayList<?>){
								ArrayList<Noeud> l = (ArrayList<Noeud>) i;
								
								for(Noeud n : l){
									bla.ajouterFils(n);
								}
								
							}
							else{
								bla.ajouterFils(i);
							} 
							RESULT=bla; :}
		| COM
	;

instruction ::= defVar:dv {: RESULT=dv; :}
	| defFunc:df {: RESULT=df; :}
	| callFunc:cf PV {: RESULT=cf; :}
	| affect:aff {: RESULT=aff; :}
	| conditionnelle:nif {: RESULT=nif; :}
	| iteration:ite {: RESULT=ite; :}
	| RETURN:ret expression:ex PV
	| NL
	;
	
conditionnelle ::= IF:i PO condition:c PF AO blabla:bla AF {: 	Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																nif.ajouterFils(bla); 
																RESULT=nif;  :}
	| IF:i PO condition:c PF AO blabla:th AF ELSE AO blabla:el AF {: 
																Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																nif.ajouterFils(th); 
																nif.ajouterFils(el); 
																RESULT=nif; :}
	;
	
iteration ::= WHILE:w PO condition:c PF AO blabla:bla AF {: Noeud ite = new Noeud("WHILE");
															ite.ajouterFils(c); 
															ite.ajouterFils(bla); 
															RESULT=ite; :}
	;
	
condition ::= expression:ex1 OPBOOL:o expression:ex2 {: Noeud cond = new Noeud((String) o);
														cond.ajouterFils(ex1); 
														cond.ajouterFils(ex2); 
														RESULT=cond; :}
	;


affect ::= VAR:v EQ:eq expr_dyn:e PV {:	
												Noeud n = new Noeud("=");
												n.ajouterFils(new Noeud("IDF", Main.tds.find((String)v)));
												n.ajouterFils(e);
												RESULT = n;
										 :}
	| VAR:v EQ:eq expr_const:e PV {: Noeud n = new Noeud("=");
												n.ajouterFils(new Noeud("IDF", Main.tds.find((String)v)));
												n.ajouterFils(new Noeud("CST",(int) e));
												RESULT = n;
										:}
	;
	


defVar ::= INT VAR:v vars:vs PV {: 	ArrayList<Noeud> varsN = new ArrayList<Noeud>();
										int vnum = Main.tds.addVar((String) v, "int", 0);
										varsN.add(new Noeud("DEF", vnum));
									  for(String s : (ArrayList<String>)vs){
											vnum = Main.tds.addVar((String) s, "int", 0);
											varsN.add(new Noeud("DEF", vnum));
									  }  
									  RESULT=varsN;
									:}
	
	| INT:t VAR:v vars:vs EQ:eq expr_const:e PV {:	ArrayList<Noeud> varsN = new ArrayList<Noeud>();
													int vnum = Main.tds.addVar((String) v , "int", (int) e);
													varsN.add(new Noeud("DEF", vnum));
													for(String s : (ArrayList<String>)vs){
														vnum = Main.tds.addVar((String) s , "int", (int) e);
														varsN.add(new Noeud("DEF", vnum));
									  				}
									  				RESULT=varsN;
										 		:}
	;
	
	
vars ::= VRG VAR:v vars:vs{: ArrayList<String> l1 = new ArrayList<String>();
							l1.add((String)v);
							if(vs!=null) { l1.addAll( (ArrayList)vs); }
							RESULT=l1 ;
							:} 
	| {:System.out.println("note/vars"); RESULT=new ArrayList<String>(); :}
	;

defFunc ::= INT VAR:fname PO defArgs PF AO blabla AF {: int num = Main.tds.addFunc((String) fname, "int");
														Noeud f = new Noeud("FUNC", num);
														:}
	| VOID VAR PO defArgs PF AO blabla AF
	| INT VAR:fname PO PF AO blabla:bla AF {: Main.tds.addFunc((String) fname, "int"); :}
	| VOID VAR PO PF AO blabla AF
	;

callFunc ::= VAR PO args PF
	| VAR PO PF
	;

args ::= expression VRG args
	| expression
	;
	
defArgs ::= INT VAR
	| INT VAR VRG defArgs
	;
	
expr_const ::= expr_const:e1 ADD:op membre_const:e2 {: if(((String) op).equals("+")){
															RESULT=((int) e1 + (int) e2);
														}
														else{
															RESULT=((int) e1 - (int) e2);
														}
														 :}
	| membre_const:n {: RESULT=n; :}
	;

membre_const ::= membre_const:e1 MUL:op atome_const:e2 {: if(((String) op).equals("*")){
															RESULT=((int) e1 * (int) e2);
														}
														else{
															RESULT=((int) e1 / (int) e2);
														}
														 :}
	| atome_const:a {: RESULT=a; :}
	;
	
atome_const ::= NUM:n {: RESULT=n; :}
	| PO expr_const:e PF {: RESULT=e; :}
	;
	
expr_dyn ::= expr_dyn:e1 ADD:op membre_dyn:e2 {: Noeud o = new Noeud((String)op);
													o.ajouterFils(e1); o.ajouterFils(e2);
													RESULT=o; :}
	| membre_dyn:n {: RESULT=n; :}
	;

membre_dyn ::= membre_dyn:e1 MUL:op atome_dyn:e2 {: Noeud o = new Noeud((String)op);
													o.ajouterFils(e1); o.ajouterFils(e2);
													RESULT=o; :}
	| atome_dyn:a {: RESULT=a; :}
	;
	
atome_dyn ::= VAR:v {: RESULT=new Noeud("IDF", Main.tds.find((String) v)); :}
	| callFunc
	| PO expr_dyn PF
	;


expression ::= expr_const:ec {: RESULT= new Noeud("CST", (int) ec); :}
	| expr_dyn:ed {: RESULT = ed; :}
	;