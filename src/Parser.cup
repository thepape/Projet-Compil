/*
 * Projet compilation
 *
 * auteurs : BURTEAUX CHAUDOIN MATHIEU NEVES PAPELIER POTIER
 */ 
package fr.ul.miage.exemple.generated;

import fr.ul.miage.exemple.*;
import fr.ul.miage.exemple.Arbre.*;
import fr.ul.miage.exemple.TDS.*;
import java.util.*;



action code {:
   
   ArrayList<Noeud> listVar_provisoire = new ArrayList<Noeud>();
   
   Arbre arbre_programme = new Arbre(new Noeud("PROG"));
   
	public void afficher() {
	
		arbre_programme.affiche();		
	}	
	
:};





/* la grammaire */

terminal VAR, NUM, PV, AO, AF, PO, PF, NL, EQ, OPBOOL, VRG, INT, RETURN, VOID, COM, IF, ELSE, WHILE, ADD, MUL;

non terminal prog, membre, atome, blabla, vars, instruction, affect, defVar, defFunc, callFunc, args, defArgs, expression, conditionnelle, condition, iteration;

start with prog;

prog ::= blabla:p {: if(p != null){ arbre_programme.getRacine().ajouterFilsDe((Noeud) p); 
						arbre_programme.getRacine().supprimerNoeudsDef(); 
						arbre_programme.getRacine().corrigerNoeudsCall();
						arbre_programme.getRacine().corrigerIDFnulls(0);
						Main.tds.verifierDoublesDeclarations();
						arbre_programme.getRacine().verifierConflitsType(false);
						}  
						afficher(); :} 
	;

blabla ::= instruction:i blabla:b {: Noeud bla = new Noeud("bla");
									if(i != null){
										if(i instanceof ArrayList<?>){
											ArrayList<Noeud> l = (ArrayList<Noeud>) i;
											
											for(Noeud n : l){
												bla.ajouterFils(n);
											}
											
										}
										else{
											bla.ajouterFils(i);
										}
									}  
									if(b != null)
										bla.ajouterFilsDe((Noeud) b);
									RESULT=bla;
									:}
		| COM blabla:b {: RESULT=b; :}
		
		| {: :}
	;

instruction ::= defVar:dv {: RESULT=dv; :}
	| defFunc:df {: RESULT=df; :}
	| callFunc:cf PV {: RESULT=cf; :}
	| affect:aff {: RESULT=aff; :}
	| conditionnelle:nif {: RESULT=nif; :}
	| iteration:ite {: RESULT=ite; :}
	| RETURN:ret expression:ex PV {: Noeud r = new Noeud("RET");
										if(ex instanceof Integer)
											r.ajouterFils(new Noeud("CST", (Integer)ex));
										else
											r.ajouterFils(ex);
										RESULT=r; :}
	| NL {: Main.currentLine++; :}
	;
	
conditionnelle ::= IF:i PO condition:c PF AO blabla:bla AF {: 	Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																Noeud nthen = new Noeud("THEN");
																nthen.ajouterFilsDe((Noeud) bla);
																nif.ajouterFils(nthen); 
																RESULT=nif;  :}
	| IF:i PO condition:c PF AO blabla:th AF ELSE AO blabla:el AF {: 
																Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																Noeud nthen = new Noeud("THEN");
																nthen.ajouterFilsDe((Noeud) th);
																Noeud nelse = new Noeud("ELSE");
																nelse.ajouterFilsDe((Noeud) el);
																nif.ajouterFils(nthen); 
																nif.ajouterFils(nelse); 
																RESULT=nif; :}
	;
	
iteration ::= WHILE:w PO condition:c PF AO blabla:bla AF {: Noeud ite = new Noeud("WHILE");
															ite.ajouterFils(c); 
															Noeud ndo = new Noeud("DO");
															ndo.ajouterFilsDe((Noeud) bla);
															ite.ajouterFils(ndo); 
															RESULT=ite; :}
	;
	
condition ::= expression:ex1 OPBOOL:o expression:ex2 {: Noeud cond = new Noeud((String) o);
														if(ex1 instanceof Integer)
															cond.ajouterFils(new Noeud("CST", (Integer)ex1));
														else
															cond.ajouterFils(ex1);
															
														if(ex2 instanceof Integer)
															cond.ajouterFils(new Noeud("CST", (Integer)ex2));
														else
															cond.ajouterFils(ex2);
														RESULT=cond; :}
	;


affect ::= VAR:v EQ:eq expression:e PV {:	
												Noeud n = new Noeud("=");
												Noeud var = new Noeud("IDF", Main.tds.find((String)v));
												var.tag = (String) v;
												n.ajouterFils(var);
												if(e instanceof Integer)
													n.ajouterFils(new Noeud("CST", (Integer)e));
												else
													n.ajouterFils(e);
												RESULT = n;
										 :}

	;
	


defVar ::= INT VAR:v vars:vs PV {: 	ArrayList<Noeud> varsN = new ArrayList<Noeud>();
										int vnum = Main.tds.addVar((String) v, "int", 0);
										varsN.add(new Noeud("DEF", vnum));
									  for(String s : (ArrayList<String>)vs){
											vnum = Main.tds.addVar((String) s, "int", 0);
											varsN.add(new Noeud("DEF", vnum));
									  }  
									  RESULT=varsN;
									:}
	
	| INT:t VAR:v vars:vs EQ:eq expression:e PV {:	if(!(e instanceof Integer)){
														throw new Exception("expression de constante attendue");
													}
													ArrayList<Noeud> varsN = new ArrayList<Noeud>();
													int vnum = Main.tds.addVar((String) v , "int", (int) e);
													varsN.add(new Noeud("DEF", vnum));
													for(String s : (ArrayList<String>)vs){
														vnum = Main.tds.addVar((String) s , "int", (int) e);
														varsN.add(new Noeud("DEF", vnum));
									  				}
									  				RESULT=varsN;
										 		:}
	;
	
	
vars ::= VRG VAR:v vars:vs{: ArrayList<String> l1 = new ArrayList<String>();
							l1.add((String)v);
							if(vs!=null) { l1.addAll( (ArrayList)vs); }
							RESULT=l1 ;
							:} 
	| {:System.out.println("note/vars"); RESULT=new ArrayList<String>(); :}
	;

defFunc ::= INT VAR:fname PO defArgs:args PF AO blabla:bla AF {: if(((String) fname).toLowerCase().equals("read") || ((String) fname).toLowerCase().equals("write"))
																	throw new Exception("La fonction "+fname+" existe deja");
														int num = Main.tds.addFunc((String) fname, "int");
														Noeud f = new Noeud("FUNC", num);
														Stack<String> pargs = (Stack<String>) args;
														
														while(!pargs.empty()){
															Main.tds.addParam(pargs.pop(), "int", num);
														}
														if(bla != null)
															f.ajouterFilsDe((Noeud) bla);
														
														f.modifierContexteDesFils(num);
														RESULT=f; :}
														
	| VOID VAR:fname PO defArgs:args PF AO blabla:bla AF {: int num = Main.tds.addFunc((String) fname, "void");
														Noeud f = new Noeud("FUNC", num);
														Stack<String> pargs = (Stack<String>) args;
														
														while(!pargs.empty()){
															Main.tds.addParam(pargs.pop(), "int", num);
														}
														if(bla != null)
															f.ajouterFilsDe((Noeud) bla);
														
														f.modifierContexteDesFils(num);
														RESULT=f;:}
	
	| INT VAR:fname PO PF AO blabla:bla AF {: int num = Main.tds.addFunc((String) fname, "int"); 
												Noeud f = new Noeud("FUNC", num);
												if(bla != null)
													f.ajouterFilsDe((Noeud) bla);
												f.modifierContexteDesFils(num); RESULT=f;:}
												
	| VOID VAR:fname PO PF AO blabla:bla AF {: int num = Main.tds.addFunc((String) fname, "void"); 
									Noeud f = new Noeud("FUNC", num);
									if(bla != null)
										f.ajouterFilsDe((Noeud) bla);
									f.modifierContexteDesFils(num); RESULT=f;:}
	;

callFunc ::= VAR:v PO args:a PF {: 	Noeud callf;
									if(((String) v).toLowerCase().equals("write")){
										callf = new Noeud("WRITE");
									}
									else{
										Integer numfunc = Main.tds.find((String) v, 0); 
										//le contexte d'une fonction est toujours egal a 0
										callf = new Noeud("CALL", numfunc);
										callf.tag = (String) v;
									}
									Stack<Noeud> pargs = (Stack<Noeud>) a;
									
									while(!pargs.empty()){
										callf.ajouterFils(pargs.pop());
									}
									RESULT=callf;
									:}
	| VAR:v PO PF {: Noeud callf;
					if(((String) v).toLowerCase().equals("read")){
						callf = new Noeud("READ");
					}
					else{
						Integer numfunc = Main.tds.find((String) v, 0); 
						//le contexte d'une fonction est toujours egal a 0
						callf = new Noeud("CALL", numfunc); 
						callf.tag= (String) v;
					}
					RESULT=callf;:}
	;

args ::= expression:e VRG args:a {: Stack<Noeud> pargs = (Stack<Noeud>) a;
									pargs.push((Noeud) e);
									RESULT=pargs; :}

	| expression:e {: Stack<Noeud> pargs = new Stack<Noeud>();
						if(e instanceof Integer)
							pargs.push(new Noeud("CST", (Integer)e));
						else
							pargs.push((Noeud) e);
						RESULT=pargs; :}
	;
	
defArgs ::= INT VAR:v {: Stack<String> pargs = new Stack<String>();
							pargs.push((String) v);
							RESULT = pargs; :}
	| INT VAR:v VRG defArgs:args {: Stack<String> pargs = (Stack<String>) args;
									pargs.push((String) v);
									RESULT=pargs; :}
	;
	
expression ::= expression:e ADD:op membre:m {: if((e instanceof Integer) && (m instanceof Integer)){
											if(((String) op).equals("+")){
												RESULT=new Integer((int) e + (int) m);
											}
											else{
												RESULT=new Integer((int) e - (int) m);
											}
									}
									else{
										Noeud o = new Noeud((String)op);
										if(e instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)e));
										else
											o.ajouterFils(e);
											
										if(m instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)m));
										else
											o.ajouterFils(m);
										RESULT=o;
									} :}
	| membre:m {: RESULT=m; :}
	;
	
membre ::= membre:m MUL:op atome:a {: if((m instanceof Integer) && (a instanceof Integer)){
											if(((String) op).equals("*")){
												RESULT=new Integer((int) m * (int) a);
											}
											else{
												RESULT=new Integer((int) m / (int) a);
											}
									}
									else{
										Noeud o = new Noeud((String)op);
										if(m instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)m));
										else
											o.ajouterFils(m);
											
										if(a instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)a));
										else
											o.ajouterFils(a);
										RESULT=o;
									} :}
	| atome:a {: RESULT=a; :}
	;

atome ::= VAR:v {: Noeud var=new Noeud("IDF", Main.tds.find((String) v)); var.tag = (String) v; RESULT=var; :}
	| NUM:n {: RESULT=((Integer) n); :}
	| callFunc:cf {: RESULT=cf; :}
	| PO expression:e PF {: RESULT=e; :}
	;
