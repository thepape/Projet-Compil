
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 14 19:22:24 CEST 2015
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import fr.ul.miage.exemple.*;
import fr.ul.miage.exemple.Arbre.*;
import fr.ul.miage.exemple.TDS.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 14 19:22:24 CEST 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\005\000\002\005\003\000\002\015\011\000\002\015" +
    "\015\000\002\017\011\000\002\016\005\000\002\006\006" +
    "\000\002\007\005\000\002\007\007\000\002\010\012\000" +
    "\002\010\012\000\002\010\011\000\002\010\011\000\002" +
    "\011\006\000\002\011\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\006\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\007\000\002" +
    "\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\022\004\013\013\015\020\016\021\022\022" +
    "\011\023\020\024\014\026\005\001\002\000\026\002\ufffd" +
    "\004\013\010\ufffd\013\015\020\016\021\022\022\011\023" +
    "\020\024\014\026\005\001\002\000\004\011\135\001\002" +
    "\000\004\006\134\001\002\000\026\002\ufff6\004\ufff6\010" +
    "\ufff6\013\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\026\ufff6\001\002\000\026\002\ufffb\004\ufffb\010\ufffb\013" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb" +
    "\001\002\000\004\004\121\001\002\000\004\002\120\001" +
    "\002\000\006\011\042\014\115\001\002\000\004\011\100" +
    "\001\002\000\026\002\ufff4\004\ufff4\010\ufff4\013\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4\001\002" +
    "\000\004\004\055\001\002\000\026\002\ufff7\004\ufff7\010" +
    "\ufff7\013\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\026\ufff7\001\002\000\026\002\ufffc\004\013\010\ufffc\013" +
    "\015\020\016\021\022\022\011\023\020\024\014\026\005" +
    "\001\002\000\026\002\ufff8\004\ufff8\010\ufff8\013\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\001\002" +
    "\000\010\004\026\005\027\011\030\001\002\000\026\002" +
    "\ufffa\004\ufffa\010\ufffa\013\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\026\ufffa\001\002\000\004\002\000\001" +
    "\002\000\014\006\uffdd\012\uffdd\015\052\016\uffdd\017\uffdd" +
    "\001\002\000\016\006\uffde\011\042\012\uffde\015\041\016" +
    "\uffde\017\uffde\001\002\000\014\006\uffdf\012\uffdf\015\037" +
    "\016\uffdf\017\uffdf\001\002\000\010\004\026\005\027\011" +
    "\030\001\002\000\004\006\032\001\002\000\026\002\ufff5" +
    "\004\ufff5\010\ufff5\013\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\026\ufff5\001\002\000\004\012\034\001\002" +
    "\000\014\006\uffdb\012\uffdb\015\035\016\uffdb\017\uffdb\001" +
    "\002\000\010\004\026\005\027\011\030\001\002\000\012" +
    "\006\uffdc\012\uffdc\016\uffdc\017\uffdc\001\002\000\010\004" +
    "\026\005\027\011\030\001\002\000\012\006\uffe2\012\uffe2" +
    "\016\uffe2\017\uffe2\001\002\000\010\004\026\005\027\011" +
    "\030\001\002\000\012\004\026\005\027\011\030\012\043" +
    "\001\002\000\014\006\uffe7\012\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\001\002\000\004\012\050\001\002\000\006\012\uffe5" +
    "\017\046\001\002\000\010\004\026\005\027\011\030\001" +
    "\002\000\004\012\uffe6\001\002\000\014\006\uffe8\012\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\001\002\000\012\006\uffe1\012" +
    "\uffe1\016\uffe1\017\uffe1\001\002\000\010\004\026\005\027" +
    "\011\030\001\002\000\012\006\uffe0\012\uffe0\016\uffe0\017" +
    "\uffe0\001\002\000\006\002\ufffe\010\ufffe\001\002\000\010" +
    "\006\060\011\057\014\056\001\002\000\010\004\026\005" +
    "\027\011\030\001\002\000\006\012\061\020\063\001\002" +
    "\000\026\002\uffee\004\uffee\010\uffee\013\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\026\uffee\001\002\000\004" +
    "\007\073\001\002\000\004\012\067\001\002\000\004\004" +
    "\064\001\002\000\006\012\uffe4\017\065\001\002\000\004" +
    "\020\063\001\002\000\004\012\uffe3\001\002\000\004\007" +
    "\070\001\002\000\022\004\013\013\015\020\016\021\022" +
    "\022\011\023\020\024\014\026\005\001\002\000\004\010" +
    "\072\001\002\000\026\002\uffec\004\uffec\010\uffec\013\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\026\uffec\001" +
    "\002\000\022\004\013\013\015\020\016\021\022\022\011" +
    "\023\020\024\014\026\005\001\002\000\004\010\075\001" +
    "\002\000\026\002\uffea\004\uffea\010\uffea\013\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\001\002\000" +
    "\004\006\077\001\002\000\026\002\uffed\004\uffed\010\uffed" +
    "\013\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\026" +
    "\uffed\001\002\000\010\004\026\005\027\011\030\001\002" +
    "\000\004\016\113\001\002\000\004\012\103\001\002\000" +
    "\004\007\104\001\002\000\022\004\013\013\015\020\016" +
    "\021\022\022\011\023\020\024\014\026\005\001\002\000" +
    "\004\010\106\001\002\000\030\002\ufff3\004\ufff3\010\ufff3" +
    "\013\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\107\026\ufff3\001\002\000\004\007\110\001\002\000\022" +
    "\004\013\013\015\020\016\021\022\022\011\023\020\024" +
    "\014\026\005\001\002\000\004\010\112\001\002\000\026" +
    "\002\ufff2\004\ufff2\010\ufff2\013\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\026\ufff2\001\002\000\010\004\026" +
    "\005\027\011\030\001\002\000\004\012\ufff0\001\002\000" +
    "\010\004\026\005\027\011\030\001\002\000\004\006\117" +
    "\001\002\000\026\002\uffef\004\uffef\010\uffef\013\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\026\uffef\001\002" +
    "\000\004\002\001\001\002\000\004\011\122\001\002\000" +
    "\006\012\123\020\063\001\002\000\004\007\131\001\002" +
    "\000\004\012\125\001\002\000\004\007\126\001\002\000" +
    "\022\004\013\013\015\020\016\021\022\022\011\023\020" +
    "\024\014\026\005\001\002\000\004\010\130\001\002\000" +
    "\026\002\uffeb\004\uffeb\010\uffeb\013\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\026\uffeb\001\002\000\022\004" +
    "\013\013\015\020\016\021\022\022\011\023\020\024\014" +
    "\026\005\001\002\000\004\010\133\001\002\000\026\002" +
    "\uffe9\004\uffe9\010\uffe9\013\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\026\uffe9\001\002\000\026\002\ufff9\004" +
    "\ufff9\010\ufff9\013\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\026\ufff9\001\002\000\010\004\026\005\027\011" +
    "\030\001\002\000\004\012\137\001\002\000\004\007\140" +
    "\001\002\000\022\004\013\013\015\020\016\021\022\022" +
    "\011\023\020\024\014\026\005\001\002\000\004\010\142" +
    "\001\002\000\026\002\ufff1\004\ufff1\010\ufff1\013\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\001\002" +
    "\000\006\002\uffff\010\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\024\002\011\003\023\005\003\006\020\007" +
    "\007\010\022\011\005\015\016\017\006\001\001\000\022" +
    "\003\142\005\003\006\020\007\007\010\022\011\005\015" +
    "\016\017\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\053\005\003\006\020\007\007\010\022\011\005\015\016" +
    "\017\006\001\001\000\002\001\001\000\006\011\024\014" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\024\014\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\024\014" +
    "\035\001\001\000\002\001\001\000\006\011\024\014\037" +
    "\001\001\000\002\001\001\000\006\011\024\014\050\001" +
    "\001\000\010\011\024\012\043\014\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\024\012\046\014\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\024\014\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\024\014\075\001\001\000\004\013\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\070" +
    "\005\003\006\020\007\007\010\022\011\005\015\016\017" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\073\005\003\006\020\007\007\010\022\011\005\015" +
    "\016\017\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\024\014" +
    "\100\016\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\104\005\003\006\020\007" +
    "\007\010\022\011\005\015\016\017\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\110\005\003\006\020\007\007\010\022\011\005\015\016" +
    "\017\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\024\014\113\001\001\000\002\001\001\000\006" +
    "\011\024\014\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\126\005\003\006\020\007\007\010\022" +
    "\011\005\015\016\017\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\131\005\003\006\020\007\007" +
    "\010\022\011\005\015\016\017\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\024" +
    "\014\100\016\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\140\005\003\006\020\007\007\010\022" +
    "\011\005\015\016\017\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


   
   ArrayList<Noeud> listVar_provisoire = new ArrayList<Noeud>();
   
   Arbre arbre_programme = new Arbre(new Noeud("Racine_Programme"));
   
	public void afficher() {
	
		arbre_programme.affiche();		
	}	
	

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= PO expression PF 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=ex; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= PO expression PF OP expression 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((Noeud) o).ajouterFils(ex1); ((Noeud) o).ajouterFils(ex2); RESULT=o; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= callFunc 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=(Noeud)v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= callFunc OP expression 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((Noeud) o).ajouterFils(f); ((Noeud) o).ajouterFils(ex); RESULT=o; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= VAR OP expression 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((Noeud) o).ajouterFils(v); ((Noeud) o).ajouterFils(ex); RESULT=o; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= NUM OP expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((Noeud) o).ajouterFils(n); ((Noeud) o).ajouterFils(ex); RESULT=o; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // defArgs ::= TYPE VAR VRG defArgs 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defArgs",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // defArgs ::= TYPE VAR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defArgs",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // args ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // args ::= expression VRG args 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // callFunc ::= VAR PO PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("callFunc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // callFunc ::= VAR PO args PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("callFunc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // defFunc ::= VOID VAR PO PF AO blabla AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defFunc ::= TYPE VAR PO PF AO blabla AF 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Main.tds.addFunc((String) fname, (String) type); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defFunc ::= VOID VAR PO defArgs PF AO blabla AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // defFunc ::= TYPE VAR PO defArgs PF AO blabla AF 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // defVar ::= TYPE VAR EQ expression PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		Main.tds.addVar(((Noeud)v).valeur , (String) t, ((Noeud)e).valeur); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defVar",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // defVar ::= TYPE VAR PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Main.tds.addVar(((Noeud)v).valeur, (String) t, 0); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defVar",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // affect ::= VAR EQ expression PV 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
			
												Noeud n = ((Noeud)eq).copy();
												n.ajouterFils(v);
												n.ajouterFils(e);
												RESULT = n;
												
										 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition ::= expression OPBOOL expression 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ((Noeud) o).ajouterFils(ex1); ((Noeud) o).ajouterFils(ex2); RESULT=o; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // iteration ::= WHILE PO condition PF AO blabla AF 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 ((Noeud) w).ajouterFils(c); ((Noeud) w).ajouterFils(bla); RESULT=w; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iteration",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conditionnelle ::= IF PO condition PF AO blabla AF ELSE AO blabla AF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 ((Noeud) i).ajouterFils(c); ((Noeud) i).ajouterFils(th); ((Noeud) i).ajouterFils(el); RESULT=i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conditionnelle ::= IF PO condition PF AO blabla AF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 ((Noeud) i).ajouterFils(c); ((Noeud) i).ajouterFils(bla); RESULT=i;  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= NL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= RETURN expression PV 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= iteration 
            {
              Object RESULT =null;
		int iteleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ite = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= conditionnelle 
            {
              Object RESULT =null;
		int nifleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nifright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object nif = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= affect 
            {
              Object RESULT =null;
		int affleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int affright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object aff = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=aff; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= callFunc PV 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= defFunc 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= defVar 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=dv; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // blabla ::= COM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // blabla ::= instruction 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blabla ::= COM blabla 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blabla ::= instruction blabla 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= blabla 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 arbre_programme.getRacine().ajouterFils(p); afficher(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

