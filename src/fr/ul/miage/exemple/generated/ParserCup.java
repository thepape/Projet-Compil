
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 16 15:34:55 CEST 2015
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import fr.ul.miage.exemple.*;
import fr.ul.miage.exemple.Arbre.*;
import fr.ul.miage.exemple.TDS.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 16 15:34:55 CEST 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\004\000\002\007\003\000\002\007\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\003\000\002\023\011\000\002\023" +
    "\015\000\002\025\011\000\002\024\005\000\002\012\006" +
    "\000\002\012\006\000\002\013\006\000\002\013\010\000" +
    "\002\010\005\000\002\010\002\000\002\014\012\000\002" +
    "\014\012\000\002\014\011\000\002\014\011\000\002\015" +
    "\006\000\002\015\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\004\000\002\017\006\000\002\021\005\000" +
    "\002\021\003\000\002\003\005\000\002\003\003\000\002" +
    "\006\003\000\002\006\005\000\002\020\005\000\002\020" +
    "\003\000\002\004\005\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\005\000\002\022\003\000" +
    "\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\022\004\014\013\016\017\006\020\022\021" +
    "\012\022\020\023\015\025\005\001\002\000\026\002\ufffd" +
    "\004\014\010\ufffd\013\016\017\006\020\022\021\012\022" +
    "\020\023\015\025\005\001\002\000\004\011\155\001\002" +
    "\000\004\004\132\001\002\000\004\006\131\001\002\000" +
    "\026\002\ufff6\004\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\025\ufff6\001\002\000\026\002" +
    "\ufffb\004\ufffb\010\ufffb\013\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\025\ufffb\001\002\000\004\004\112\001" +
    "\002\000\004\002\111\001\002\000\006\011\057\014\104" +
    "\001\002\000\004\011\067\001\002\000\026\002\ufff4\004" +
    "\ufff4\010\ufff4\013\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\025\ufff4\001\002\000\026\002\ufff7\004\ufff7\010" +
    "\ufff7\013\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\025\ufff7\001\002\000\026\002\ufffc\004\014\010\ufffc\013" +
    "\016\017\006\020\022\021\012\022\020\023\015\025\005" +
    "\001\002\000\026\002\ufff8\004\ufff8\010\ufff8\013\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\001\002" +
    "\000\010\004\031\005\025\011\035\001\002\000\026\002" +
    "\ufffa\004\ufffa\010\ufffa\013\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\025\ufffa\001\002\000\004\002\000\001" +
    "\002\000\016\006\uffdb\012\uffdb\015\uffdb\016\uffdb\026\uffdb" +
    "\027\uffdb\001\002\000\016\006\uffde\012\uffde\015\uffde\016" +
    "\uffde\026\uffde\027\046\001\002\000\016\006\uffd4\012\uffd4" +
    "\015\uffd4\016\uffd4\026\uffd4\027\uffd4\001\002\000\016\006" +
    "\uffd8\012\uffd8\015\uffd8\016\uffd8\026\uffd8\027\054\001\002" +
    "\000\020\006\uffd5\011\057\012\uffd5\015\uffd5\016\uffd5\026" +
    "\uffd5\027\uffd5\001\002\000\014\006\uffd1\012\uffd1\015\uffd1" +
    "\016\uffd1\026\051\001\002\000\004\006\056\001\002\000" +
    "\014\006\uffd2\012\uffd2\015\uffd2\016\uffd2\026\043\001\002" +
    "\000\010\004\031\005\025\011\035\001\002\000\016\006" +
    "\uffdc\012\uffdc\015\uffdc\016\uffdc\026\uffdc\027\uffdc\001\002" +
    "\000\016\006\uffd6\012\uffd6\015\uffd6\016\uffd6\026\uffd6\027" +
    "\uffd6\001\002\000\006\012\050\026\051\001\002\000\006" +
    "\012\042\026\043\001\002\000\016\006\uffda\012\uffda\015" +
    "\uffda\016\uffda\026\uffda\027\uffda\001\002\000\006\005\025" +
    "\011\045\001\002\000\016\006\uffdf\012\uffdf\015\uffdf\016" +
    "\uffdf\026\uffdf\027\046\001\002\000\006\005\025\011\045" +
    "\001\002\000\006\005\025\011\045\001\002\000\016\006" +
    "\uffdd\012\uffdd\015\uffdd\016\uffdd\026\uffdd\027\uffdd\001\002" +
    "\000\016\006\uffd3\012\uffd3\015\uffd3\016\uffd3\026\uffd3\027" +
    "\uffd3\001\002\000\006\004\031\011\052\001\002\000\006" +
    "\004\031\011\052\001\002\000\016\006\uffd9\012\uffd9\015" +
    "\uffd9\016\uffd9\026\uffd9\027\054\001\002\000\006\004\031" +
    "\011\052\001\002\000\016\006\uffd7\012\uffd7\015\uffd7\016" +
    "\uffd7\026\uffd7\027\uffd7\001\002\000\026\002\ufff5\004\ufff5" +
    "\010\ufff5\013\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\025\ufff5\001\002\000\012\004\031\005\025\011\035" +
    "\012\060\001\002\000\016\006\uffe4\012\uffe4\015\uffe4\016" +
    "\uffe4\026\uffe4\027\uffe4\001\002\000\006\012\uffe2\016\064" +
    "\001\002\000\004\012\063\001\002\000\016\006\uffe5\012" +
    "\uffe5\015\uffe5\016\uffe5\026\uffe5\027\uffe5\001\002\000\010" +
    "\004\031\005\025\011\035\001\002\000\004\012\uffe3\001" +
    "\002\000\006\002\ufffe\010\ufffe\001\002\000\010\004\031" +
    "\005\025\011\035\001\002\000\004\012\074\001\002\000" +
    "\004\015\072\001\002\000\010\004\031\005\025\011\035" +
    "\001\002\000\004\012\ufff0\001\002\000\004\007\075\001" +
    "\002\000\022\004\014\013\016\017\006\020\022\021\012" +
    "\022\020\023\015\025\005\001\002\000\004\010\077\001" +
    "\002\000\030\002\ufff3\004\ufff3\010\ufff3\013\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\100\025\ufff3\001" +
    "\002\000\004\007\101\001\002\000\022\004\014\013\016" +
    "\017\006\020\022\021\012\022\020\023\015\025\005\001" +
    "\002\000\004\010\103\001\002\000\026\002\ufff2\004\ufff2" +
    "\010\ufff2\013\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\025\ufff2\001\002\000\010\004\031\005\025\011\035" +
    "\001\002\000\006\006\110\026\051\001\002\000\006\006" +
    "\107\026\043\001\002\000\026\002\uffee\004\uffee\010\uffee" +
    "\013\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025" +
    "\uffee\001\002\000\026\002\uffef\004\uffef\010\uffef\013\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef\001" +
    "\002\000\004\002\001\001\002\000\004\011\113\001\002" +
    "\000\006\012\114\017\116\001\002\000\004\007\126\001" +
    "\002\000\004\012\122\001\002\000\004\004\117\001\002" +
    "\000\006\012\uffe1\016\120\001\002\000\004\017\116\001" +
    "\002\000\004\012\uffe0\001\002\000\004\007\123\001\002" +
    "\000\022\004\014\013\016\017\006\020\022\021\012\022" +
    "\020\023\015\025\005\001\002\000\004\010\125\001\002" +
    "\000\026\002\uffe8\004\uffe8\010\uffe8\013\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\001\002\000\022" +
    "\004\014\013\016\017\006\020\022\021\012\022\020\023" +
    "\015\025\005\001\002\000\004\010\130\001\002\000\026" +
    "\002\uffe6\004\uffe6\010\uffe6\013\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\025\uffe6\001\002\000\026\002\ufff9" +
    "\004\ufff9\010\ufff9\013\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\025\ufff9\001\002\000\012\006\uffea\011\134" +
    "\014\uffea\016\133\001\002\000\004\004\153\001\002\000" +
    "\006\012\142\017\116\001\002\000\006\006\137\014\136" +
    "\001\002\000\006\005\025\011\045\001\002\000\026\002" +
    "\uffed\004\uffed\010\uffed\013\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\025\uffed\001\002\000\006\006\141\026" +
    "\043\001\002\000\026\002\uffec\004\uffec\010\uffec\013\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec\001" +
    "\002\000\004\007\150\001\002\000\004\012\144\001\002" +
    "\000\004\007\145\001\002\000\022\004\014\013\016\017" +
    "\006\020\022\021\012\022\020\023\015\025\005\001\002" +
    "\000\004\010\147\001\002\000\026\002\uffe9\004\uffe9\010" +
    "\uffe9\013\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\001\002\000\022\004\014\013\016\017\006\020" +
    "\022\021\012\022\020\023\015\025\005\001\002\000\004" +
    "\010\152\001\002\000\026\002\uffe7\004\uffe7\010\uffe7\013" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7" +
    "\001\002\000\010\006\uffea\014\uffea\016\133\001\002\000" +
    "\006\006\uffeb\014\uffeb\001\002\000\010\004\031\005\025" +
    "\011\035\001\002\000\004\012\157\001\002\000\004\007" +
    "\160\001\002\000\022\004\014\013\016\017\006\020\022" +
    "\021\012\022\020\023\015\025\005\001\002\000\004\010" +
    "\162\001\002\000\026\002\ufff1\004\ufff1\010\ufff1\013\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\001" +
    "\002\000\006\002\uffff\010\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\024\002\012\007\023\011\003\012\020\013" +
    "\010\014\022\015\006\023\016\025\007\001\001\000\022" +
    "\007\162\011\003\012\020\013\010\014\022\015\006\023" +
    "\016\025\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\065\011\003\012\020\013\010\014\022\015\006\023\016" +
    "\025\007\001\001\000\002\001\001\000\022\003\025\004" +
    "\027\005\036\006\035\015\026\020\031\021\033\022\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\025\004\027\005\036\006\035" +
    "\015\026\020\037\021\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\043\006\035\001\001\000\002\001" +
    "\001\000\010\003\025\006\035\021\040\001\001\000\004" +
    "\006\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\052\005\036\015\026\001\001\000\012\004\027" +
    "\005\036\015\026\020\037\001\001\000\002\001\001\000" +
    "\006\005\054\015\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\025\004\027\005\036\006\035\015" +
    "\026\016\061\020\031\021\033\022\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\025\004\027\005\036\006\035\015\026" +
    "\016\064\020\031\021\033\022\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\025\004\027\005\036" +
    "\006\035\015\026\020\031\021\033\022\070\024\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\025" +
    "\004\027\005\036\006\035\015\026\020\031\021\033\022" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\075\011\003\012\020\013\010\014\022\015\006\023" +
    "\016\025\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\101\011\003\012\020\013" +
    "\010\014\022\015\006\023\016\025\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\025\004\027\005" +
    "\036\006\035\015\026\020\104\021\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\123\011\003\012" +
    "\020\013\010\014\022\015\006\023\016\025\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\126\011" +
    "\003\012\020\013\010\014\022\015\006\023\016\025\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\134\001\001\000\002\001\001\000\004" +
    "\017\142\001\001\000\002\001\001\000\010\003\025\006" +
    "\035\021\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\007\145\011\003\012\020\013\010" +
    "\014\022\015\006\023\016\025\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\150\011\003\012\020" +
    "\013\010\014\022\015\006\023\016\025\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\153\001\001" +
    "\000\002\001\001\000\024\003\025\004\027\005\036\006" +
    "\035\015\026\020\031\021\033\022\070\024\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\160\011" +
    "\003\012\020\013\010\014\022\015\006\023\016\025\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


   
   ArrayList<Noeud> listVar_provisoire = new ArrayList<Noeud>();
   
   Arbre arbre_programme = new Arbre(new Noeud("PROG"));
   
	public void afficher() {
	
		arbre_programme.affiche();		
	}	
	

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expr_dyn 
            {
              Object RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ed = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = ed; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expr_const 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT= new Noeud("CST", (int) ec); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atome_dyn ::= PO expr_dyn PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome_dyn",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atome_dyn ::= callFunc 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome_dyn",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atome_dyn ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=new Noeud("IDF", Main.tds.find((String) v)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome_dyn",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // membre_dyn ::= atome_dyn 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("membre_dyn",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // membre_dyn ::= membre_dyn MUL atome_dyn 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Noeud o = new Noeud((String)op);
													o.ajouterFils(e1); o.ajouterFils(e2);
													RESULT=o; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("membre_dyn",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_dyn ::= membre_dyn 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_dyn",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_dyn ::= expr_dyn ADD membre_dyn 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Noeud o = new Noeud((String)op);
													o.ajouterFils(e1); o.ajouterFils(e2);
													RESULT=o; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_dyn",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atome_const ::= PO expr_const PF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome_const",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atome_const ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome_const",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // membre_const ::= atome_const 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("membre_const",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // membre_const ::= membre_const MUL atome_const 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(((String) op).equals("*")){
															RESULT=((int) e1 * (int) e2);
														}
														else{
															RESULT=((int) e1 / (int) e2);
														}
														 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("membre_const",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_const ::= membre_const 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=n; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_const",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_const ::= expr_const ADD membre_const 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(((String) op).equals("+")){
															RESULT=((int) e1 + (int) e2);
														}
														else{
															RESULT=((int) e1 - (int) e2);
														}
														 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_const",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // defArgs ::= INT VAR VRG defArgs 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defArgs",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // defArgs ::= INT VAR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defArgs",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // args ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // args ::= expression VRG args 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // callFunc ::= VAR PO PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("callFunc",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // callFunc ::= VAR PO args PF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("callFunc",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // defFunc ::= VOID VAR PO PF AO blabla AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // defFunc ::= INT VAR PO PF AO blabla AF 
            {
              Object RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Main.tds.addFunc((String) fname, "int"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // defFunc ::= VOID VAR PO defArgs PF AO blabla AF 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // defFunc ::= INT VAR PO defArgs PF AO blabla AF 
            {
              Object RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		 int num = Main.tds.addFunc((String) fname, "int");
														Noeud f = new Noeud("FUNC", num);
														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vars ::= 
            {
              Object RESULT =null;
		System.out.println("note/vars"); RESULT=new ArrayList<String>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vars ::= VRG VAR vars 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ArrayList<String> l1 = new ArrayList<String>();
							l1.add((String)v);
							if(vs!=null) { l1.addAll( (ArrayList)vs); }
							RESULT=l1 ;
							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // defVar ::= INT VAR vars EQ expr_const PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
			ArrayList<Noeud> varsN = new ArrayList<Noeud>();
													int vnum = Main.tds.addVar((String) v , "int", (int) e);
													varsN.add(new Noeud("DEF", vnum));
													for(String s : (ArrayList<String>)vs){
														vnum = Main.tds.addVar((String) s , "int", (int) e);
														varsN.add(new Noeud("DEF", vnum));
									  				}
									  				RESULT=varsN;
										 		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defVar",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // defVar ::= INT VAR vars PV 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	ArrayList<Noeud> varsN = new ArrayList<Noeud>();
										int vnum = Main.tds.addVar((String) v, "int", 0);
										varsN.add(new Noeud("DEF", vnum));
									  for(String s : (ArrayList<String>)vs){
											vnum = Main.tds.addVar((String) s, "int", 0);
											varsN.add(new Noeud("DEF", vnum));
									  }  
									  RESULT=varsN;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defVar",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // affect ::= VAR EQ expr_const PV 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Noeud n = new Noeud("=");
												n.ajouterFils(new Noeud("IDF", Main.tds.find((String)v)));
												n.ajouterFils(new Noeud("CST",(int) e));
												RESULT = n;
										
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // affect ::= VAR EQ expr_dyn PV 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
			
												Noeud n = new Noeud("=");
												n.ajouterFils(new Noeud("IDF", Main.tds.find((String)v)));
												n.ajouterFils(e);
												RESULT = n;
										 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition ::= expression OPBOOL expression 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Noeud cond = new Noeud((String) o);
														cond.ajouterFils(ex1); 
														cond.ajouterFils(ex2); 
														RESULT=cond; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // iteration ::= WHILE PO condition PF AO blabla AF 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Noeud ite = new Noeud("WHILE");
															ite.ajouterFils(c); 
															ite.ajouterFils(bla); 
															RESULT=ite; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iteration",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conditionnelle ::= IF PO condition PF AO blabla AF ELSE AO blabla AF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
																Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																nif.ajouterFils(th); 
																nif.ajouterFils(el); 
																RESULT=nif; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conditionnelle ::= IF PO condition PF AO blabla AF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																nif.ajouterFils(bla); 
																RESULT=nif;  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= NL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= RETURN expression PV 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= iteration 
            {
              Object RESULT =null;
		int iteleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ite = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=ite; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= conditionnelle 
            {
              Object RESULT =null;
		int nifleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nifright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object nif = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=nif; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= affect 
            {
              Object RESULT =null;
		int affleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int affright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object aff = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=aff; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= callFunc PV 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=cf; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= defFunc 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=df; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= defVar 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=dv; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // blabla ::= COM 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // blabla ::= instruction 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 	Noeud bla = new Noeud("bla");
							if(i instanceof ArrayList<?>){
								ArrayList<Noeud> l = (ArrayList<Noeud>) i;
								
								for(Noeud n : l){
									bla.ajouterFils(n);
								}
								
							}
							else{
								bla.ajouterFils(i);
							} 
							RESULT=bla; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blabla ::= COM blabla 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=b; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blabla ::= instruction blabla 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Noeud bla = new Noeud("bla");
									if(i != null){
										if(i instanceof ArrayList<?>){
											ArrayList<Noeud> l = (ArrayList<Noeud>) i;
											
											for(Noeud n : l){
												bla.ajouterFils(n);
											}
											
										}
										else{
											bla.ajouterFils(i);
										}
									}  
									if(b != null)
										bla.ajouterFilsDe((Noeud) b);
									RESULT=bla;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= blabla 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 arbre_programme.getRacine().ajouterFilsDe((Noeud) p); afficher(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

