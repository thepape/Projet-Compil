
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 16 23:20:52 CEST 2015
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import fr.ul.miage.exemple.*;
import fr.ul.miage.exemple.Arbre.*;
import fr.ul.miage.exemple.TDS.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 16 23:20:52 CEST 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\007\003" +
    "\000\002\007\003\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\007\003\000\002\017\011\000\002\017\015\000\002\021" +
    "\011\000\002\020\005\000\002\010\006\000\002\011\006" +
    "\000\002\011\010\000\002\006\005\000\002\006\002\000" +
    "\002\012\012\000\002\012\012\000\002\012\011\000\002" +
    "\012\011\000\002\013\006\000\002\013\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\004\000\002\015\006" +
    "\000\002\016\005\000\002\016\003\000\002\003\005\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\024\002\ufffd\004\014\013\015\017\006\020" +
    "\022\021\012\022\020\023\016\025\007\001\002\000\026" +
    "\002\ufffd\004\014\010\ufffd\013\015\017\006\020\022\021" +
    "\012\022\020\023\016\025\007\001\002\000\004\006\144" +
    "\001\002\000\004\004\121\001\002\000\004\011\113\001" +
    "\002\000\026\002\ufff7\004\ufff7\010\ufff7\013\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\001\002\000" +
    "\026\002\ufffc\004\ufffc\010\ufffc\013\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\025\ufffc\001\002\000\004\004" +
    "\074\001\002\000\004\002\073\001\002\000\006\011\043" +
    "\014\070\001\002\000\026\002\ufff5\004\ufff5\010\ufff5\013" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5" +
    "\001\002\000\004\011\053\001\002\000\026\002\ufff8\004" +
    "\ufff8\010\ufff8\013\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\025\ufff8\001\002\000\026\002\ufffd\004\014\010" +
    "\ufffd\013\015\017\006\020\022\021\012\022\020\023\016" +
    "\025\007\001\002\000\026\002\ufff9\004\ufff9\010\ufff9\013" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\025\ufff9" +
    "\001\002\000\010\004\026\005\027\011\030\001\002\000" +
    "\026\002\ufffb\004\ufffb\010\ufffb\013\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\025\ufffb\001\002\000\004\002" +
    "\000\001\002\000\016\006\uffdb\012\uffdb\015\uffdb\016\uffdb" +
    "\026\uffdb\027\uffdb\001\002\000\020\006\uffdd\011\043\012" +
    "\uffdd\015\uffdd\016\uffdd\026\uffdd\027\uffdd\001\002\000\016" +
    "\006\uffdc\012\uffdc\015\uffdc\016\uffdc\026\uffdc\027\uffdc\001" +
    "\002\000\010\004\026\005\027\011\030\001\002\000\016" +
    "\006\uffde\012\uffde\015\uffde\016\uffde\026\uffde\027\uffde\001" +
    "\002\000\016\006\uffe0\012\uffe0\015\uffe0\016\uffe0\026\uffe0" +
    "\027\037\001\002\000\006\006\035\026\034\001\002\000" +
    "\010\004\026\005\027\011\030\001\002\000\026\002\ufff6" +
    "\004\ufff6\010\ufff6\013\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\025\ufff6\001\002\000\016\006\uffe1\012\uffe1" +
    "\015\uffe1\016\uffe1\026\uffe1\027\037\001\002\000\010\004" +
    "\026\005\027\011\030\001\002\000\016\006\uffdf\012\uffdf" +
    "\015\uffdf\016\uffdf\026\uffdf\027\uffdf\001\002\000\006\012" +
    "\042\026\034\001\002\000\016\006\uffda\012\uffda\015\uffda" +
    "\016\uffda\026\uffda\027\uffda\001\002\000\012\004\026\005" +
    "\027\011\030\012\044\001\002\000\016\006\uffe6\012\uffe6" +
    "\015\uffe6\016\uffe6\026\uffe6\027\uffe6\001\002\000\004\012" +
    "\051\001\002\000\010\012\uffe4\016\047\026\034\001\002" +
    "\000\010\004\026\005\027\011\030\001\002\000\004\012" +
    "\uffe5\001\002\000\016\006\uffe7\012\uffe7\015\uffe7\016\uffe7" +
    "\026\uffe7\027\uffe7\001\002\000\006\002\ufffe\010\ufffe\001" +
    "\002\000\010\004\026\005\027\011\030\001\002\000\006" +
    "\015\066\026\034\001\002\000\004\012\056\001\002\000" +
    "\004\007\057\001\002\000\024\004\014\010\ufffd\013\015" +
    "\017\006\020\022\021\012\022\020\023\016\025\007\001" +
    "\002\000\004\010\061\001\002\000\030\002\ufff4\004\ufff4" +
    "\010\ufff4\013\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\062\025\ufff4\001\002\000\004\007\063\001\002" +
    "\000\024\004\014\010\ufffd\013\015\017\006\020\022\021" +
    "\012\022\020\023\016\025\007\001\002\000\004\010\065" +
    "\001\002\000\026\002\ufff3\004\ufff3\010\ufff3\013\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\025\ufff3\001\002" +
    "\000\010\004\026\005\027\011\030\001\002\000\006\012" +
    "\ufff1\026\034\001\002\000\010\004\026\005\027\011\030" +
    "\001\002\000\006\006\072\026\034\001\002\000\026\002" +
    "\ufff0\004\ufff0\010\ufff0\013\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\025\ufff0\001\002\000\004\002\001\001" +
    "\002\000\004\011\075\001\002\000\006\012\076\017\100" +
    "\001\002\000\004\007\110\001\002\000\004\012\104\001" +
    "\002\000\004\004\101\001\002\000\006\012\uffe3\016\102" +
    "\001\002\000\004\017\100\001\002\000\004\012\uffe2\001" +
    "\002\000\004\007\105\001\002\000\024\004\014\010\ufffd" +
    "\013\015\017\006\020\022\021\012\022\020\023\016\025" +
    "\007\001\002\000\004\010\107\001\002\000\026\002\uffea" +
    "\004\uffea\010\uffea\013\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\025\uffea\001\002\000\024\004\014\010\ufffd" +
    "\013\015\017\006\020\022\021\012\022\020\023\016\025" +
    "\007\001\002\000\004\010\112\001\002\000\026\002\uffe8" +
    "\004\uffe8\010\uffe8\013\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\025\uffe8\001\002\000\010\004\026\005\027" +
    "\011\030\001\002\000\004\012\115\001\002\000\004\007" +
    "\116\001\002\000\024\004\014\010\ufffd\013\015\017\006" +
    "\020\022\021\012\022\020\023\016\025\007\001\002\000" +
    "\004\010\120\001\002\000\026\002\ufff2\004\ufff2\010\ufff2" +
    "\013\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025" +
    "\ufff2\001\002\000\012\006\uffec\011\123\014\uffec\016\122" +
    "\001\002\000\004\004\142\001\002\000\006\012\131\017" +
    "\100\001\002\000\006\006\126\014\125\001\002\000\010" +
    "\004\026\005\027\011\030\001\002\000\026\002\uffef\004" +
    "\uffef\010\uffef\013\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\025\uffef\001\002\000\006\006\130\026\034\001" +
    "\002\000\026\002\uffee\004\uffee\010\uffee\013\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\001\002\000" +
    "\004\007\137\001\002\000\004\012\133\001\002\000\004" +
    "\007\134\001\002\000\024\004\014\010\ufffd\013\015\017" +
    "\006\020\022\021\012\022\020\023\016\025\007\001\002" +
    "\000\004\010\136\001\002\000\026\002\uffeb\004\uffeb\010" +
    "\uffeb\013\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\025\uffeb\001\002\000\024\004\014\010\ufffd\013\015\017" +
    "\006\020\022\021\012\022\020\023\016\025\007\001\002" +
    "\000\004\010\141\001\002\000\026\002\uffe9\004\uffe9\010" +
    "\uffe9\013\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\001\002\000\010\006\uffec\014\uffec\016\122\001" +
    "\002\000\006\006\uffed\014\uffed\001\002\000\026\002\ufffa" +
    "\004\ufffa\010\ufffa\013\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\025\ufffa\001\002\000\006\002\uffff\010\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\024\002\012\005\023\007\003\010\020\011" +
    "\010\012\022\013\004\017\016\021\007\001\001\000\022" +
    "\005\144\007\003\010\020\011\010\012\022\013\004\017" +
    "\016\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\051\007\003\010\020\011\010\012\022\013\004\017\016" +
    "\021\007\001\001\000\002\001\001\000\012\003\031\004" +
    "\030\013\024\016\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\031\004\030\013\024\016\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\035\004\030\013\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\037\013\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\031\004\030\013\024\014\044\016\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\031\004\030\013\024\014\047\016\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\031\004\030\013\024\016\053\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\057\007\003\010\020\011\010\012\022\013\004\017" +
    "\016\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\063\007\003\010\020\011" +
    "\010\012\022\013\004\017\016\021\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\031\004\030\013" +
    "\024\016\066\001\001\000\002\001\001\000\012\003\031" +
    "\004\030\013\024\016\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\105\007" +
    "\003\010\020\011\010\012\022\013\004\017\016\021\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\110\007\003\010\020\011\010\012\022\013\004\017\016" +
    "\021\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\031\004\030\013\024\016\053\020\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\116\007" +
    "\003\010\020\011\010\012\022\013\004\017\016\021\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\123\001\001\000\002\001\001\000\004\015\131\001\001" +
    "\000\002\001\001\000\012\003\031\004\030\013\024\016" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\134\007\003\010\020\011\010\012\022" +
    "\013\004\017\016\021\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\137\007\003\010\020\011\010" +
    "\012\022\013\004\017\016\021\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


   
   ArrayList<Noeud> listVar_provisoire = new ArrayList<Noeud>();
   
   Arbre arbre_programme = new Arbre(new Noeud("PROG"));
   
	public void afficher() {
	
		arbre_programme.affiche();		
	}	
	

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atome ::= PO expression PF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atome ::= callFunc 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=cf; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // atome ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=((Integer) n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // atome ::= VAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Noeud var=new Noeud("IDF", Main.tds.find((String) v)); var.tag = (String) v; RESULT=var; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // membre ::= atome 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("membre",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // membre ::= membre MUL atome 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if((m instanceof Integer) && (a instanceof Integer)){
											if(((String) op).equals("*")){
												RESULT=new Integer((int) m * (int) a);
											}
											else{
												RESULT=new Integer((int) m / (int) a);
											}
									}
									else{
										Noeud o = new Noeud((String)op);
										if(m instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)m));
										else
											o.ajouterFils(m);
											
										if(a instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)a));
										else
											o.ajouterFils(a);
										RESULT=o;
									} 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("membre",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= membre 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=m; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression ADD membre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if((e instanceof Integer) && (m instanceof Integer)){
											if(((String) op).equals("+")){
												RESULT=new Integer((int) e + (int) m);
											}
											else{
												RESULT=new Integer((int) e - (int) m);
											}
									}
									else{
										Noeud o = new Noeud((String)op);
										if(e instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)e));
										else
											o.ajouterFils(e);
											
										if(m instanceof Integer)
											o.ajouterFils(new Noeud("CST", (Integer)m));
										else
											o.ajouterFils(m);
										RESULT=o;
									} 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // defArgs ::= INT VAR VRG defArgs 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Stack<String> pargs = (Stack<String>) args;
									pargs.push((String) v);
									RESULT=pargs; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defArgs",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // defArgs ::= INT VAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Stack<String> pargs = new Stack<String>();
							pargs.push((String) v);
							RESULT = pargs; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defArgs",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // args ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Stack<Noeud> pargs = new Stack<Noeud>();
						if(e instanceof Integer)
							pargs.push(new Noeud("CST", (Integer)e));
						else
							pargs.push((Noeud) e);
						RESULT=pargs; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // args ::= expression VRG args 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Stack<Noeud> pargs = (Stack<Noeud>) a;
									pargs.push((Noeud) e);
									RESULT=pargs; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // callFunc ::= VAR PO PF 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 Noeud callf;
					if(((String) v).toLowerCase().equals("read")){
						callf = new Noeud("READ");
					}
					else{
						Integer numfunc = Main.tds.find((String) v, 0); 
						//le contexte d'une fonction est toujours egal a 0
						callf = new Noeud("CALL", numfunc); 
						callf.tag= (String) v;
					}
					RESULT=callf;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("callFunc",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // callFunc ::= VAR PO args PF 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	Noeud callf;
									if(((String) v).toLowerCase().equals("write")){
										callf = new Noeud("WRITE");
									}
									else{
										Integer numfunc = Main.tds.find((String) v, 0); 
										//le contexte d'une fonction est toujours egal a 0
										callf = new Noeud("CALL", numfunc);
										callf.tag = (String) v;
									}
									Stack<Noeud> pargs = (Stack<Noeud>) a;
									
									while(!pargs.empty()){
										callf.ajouterFils(pargs.pop());
									}
									RESULT=callf;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("callFunc",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // defFunc ::= VOID VAR PO PF AO blabla AF 
            {
              Object RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 int num = Main.tds.addFunc((String) fname, "void"); 
									Noeud f = new Noeud("FUNC", num);
									if(bla != null)
										f.ajouterFilsDe((Noeud) bla);
									f.modifierContexteDesFils(num); RESULT=f;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // defFunc ::= INT VAR PO PF AO blabla AF 
            {
              Object RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 int num = Main.tds.addFunc((String) fname, "int"); 
												Noeud f = new Noeud("FUNC", num);
												if(bla != null)
													f.ajouterFilsDe((Noeud) bla);
												f.modifierContexteDesFils(num); RESULT=f;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defFunc ::= VOID VAR PO defArgs PF AO blabla AF 
            {
              Object RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 int num = Main.tds.addFunc((String) fname, "void");
														Noeud f = new Noeud("FUNC", num);
														Stack<String> pargs = (Stack<String>) args;
														
														while(!pargs.empty()){
															Main.tds.addParam(pargs.pop(), "int", num);
														}
														if(bla != null)
															f.ajouterFilsDe((Noeud) bla);
														
														f.modifierContexteDesFils(num);
														RESULT=f;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defFunc ::= INT VAR PO defArgs PF AO blabla AF 
            {
              Object RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object fname = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(((String) fname).toLowerCase().equals("read") || ((String) fname).toLowerCase().equals("write"))
																	throw new Exception("La fonction "+fname+" existe deja");
														int num = Main.tds.addFunc((String) fname, "int");
														Noeud f = new Noeud("FUNC", num);
														Stack<String> pargs = (Stack<String>) args;
														
														while(!pargs.empty()){
															Main.tds.addParam(pargs.pop(), "int", num);
														}
														if(bla != null)
															f.ajouterFilsDe((Noeud) bla);
														
														f.modifierContexteDesFils(num);
														RESULT=f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defFunc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vars ::= 
            {
              Object RESULT =null;
		System.out.println("note/vars"); RESULT=new ArrayList<String>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vars ::= VRG VAR vars 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 ArrayList<String> l1 = new ArrayList<String>();
							l1.add((String)v);
							if(vs!=null) { l1.addAll( (ArrayList)vs); }
							RESULT=l1 ;
							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // defVar ::= INT VAR vars EQ expression PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
			if(!(e instanceof Integer)){
														throw new Exception("expression de constante attendue");
													}
													ArrayList<Noeud> varsN = new ArrayList<Noeud>();
													int vnum = Main.tds.addVar((String) v , "int", (int) e);
													varsN.add(new Noeud("DEF", vnum));
													for(String s : (ArrayList<String>)vs){
														vnum = Main.tds.addVar((String) s , "int", (int) e);
														varsN.add(new Noeud("DEF", vnum));
									  				}
									  				RESULT=varsN;
										 		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defVar",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // defVar ::= INT VAR vars PV 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object vs = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	ArrayList<Noeud> varsN = new ArrayList<Noeud>();
										int vnum = Main.tds.addVar((String) v, "int", 0);
										varsN.add(new Noeud("DEF", vnum));
									  for(String s : (ArrayList<String>)vs){
											vnum = Main.tds.addVar((String) s, "int", 0);
											varsN.add(new Noeud("DEF", vnum));
									  }  
									  RESULT=varsN;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defVar",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // affect ::= VAR EQ expression PV 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
			
												Noeud n = new Noeud("=");
												Noeud var = new Noeud("IDF", Main.tds.find((String)v));
												var.tag = (String) v;
												n.ajouterFils(var);
												if(e instanceof Integer)
													n.ajouterFils(new Noeud("CST", (Integer)e));
												else
													n.ajouterFils(e);
												RESULT = n;
										 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affect",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition ::= expression OPBOOL expression 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Noeud cond = new Noeud((String) o);
														if(ex1 instanceof Integer)
															cond.ajouterFils(new Noeud("CST", (Integer)ex1));
														else
															cond.ajouterFils(ex1);
															
														if(ex2 instanceof Integer)
															cond.ajouterFils(new Noeud("CST", (Integer)ex2));
														else
															cond.ajouterFils(ex2);
														RESULT=cond; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // iteration ::= WHILE PO condition PF AO blabla AF 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Noeud ite = new Noeud("WHILE");
															ite.ajouterFils(c); 
															Noeud ndo = new Noeud("DO");
															ndo.ajouterFilsDe((Noeud) bla);
															ite.ajouterFils(ndo); 
															RESULT=ite; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iteration",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conditionnelle ::= IF PO condition PF AO blabla AF ELSE AO blabla AF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
																Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																Noeud nthen = new Noeud("THEN");
																nthen.ajouterFilsDe((Noeud) th);
																Noeud nelse = new Noeud("ELSE");
																nelse.ajouterFilsDe((Noeud) el);
																nif.ajouterFils(nthen); 
																nif.ajouterFils(nelse); 
																RESULT=nif; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conditionnelle ::= IF PO condition PF AO blabla AF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object bla = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 	Noeud nif = new Noeud("IF");
																nif.ajouterFils(c); 
																Noeud nthen = new Noeud("THEN");
																nthen.ajouterFilsDe((Noeud) bla);
																nif.ajouterFils(nthen); 
																RESULT=nif;  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= NL 
            {
              Object RESULT =null;
		 Main.currentLine++; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= RETURN expression PV 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Noeud r = new Noeud("RET");
										if(ex instanceof Integer)
											r.ajouterFils(new Noeud("CST", (Integer)ex));
										else
											r.ajouterFils(ex);
										RESULT=r; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= iteration 
            {
              Object RESULT =null;
		int iteleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iteright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ite = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=ite; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= conditionnelle 
            {
              Object RESULT =null;
		int nifleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nifright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object nif = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=nif; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= affect 
            {
              Object RESULT =null;
		int affleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int affright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object aff = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=aff; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= callFunc PV 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=cf; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= defFunc 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=df; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= defVar 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=dv; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // blabla ::= 
            {
              Object RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blabla ::= COM blabla 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=b; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blabla ::= instruction blabla 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Noeud bla = new Noeud("bla");
									if(i != null){
										if(i instanceof ArrayList<?>){
											ArrayList<Noeud> l = (ArrayList<Noeud>) i;
											
											for(Noeud n : l){
												bla.ajouterFils(n);
											}
											
										}
										else{
											bla.ajouterFils(i);
										}
									}  
									if(b != null)
										bla.ajouterFilsDe((Noeud) b);
									RESULT=bla;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blabla",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= blabla 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(p != null){ arbre_programme.getRacine().ajouterFilsDe((Noeud) p); 
						arbre_programme.getRacine().supprimerNoeudsDef(); 
						arbre_programme.getRacine().corrigerNoeudsCall();
						arbre_programme.getRacine().corrigerIDFnulls(0);
						Main.tds.verifierDoublesDeclarations();
						arbre_programme.getRacine().verifierConflitsType(false);
						}  
						afficher(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

