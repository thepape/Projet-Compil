PROBLÈMES À RÉSOUDRE :

	- Une fonction peut être déclarer dans une autre fonction
	- Une fonction int peut ne pas avoir d'instruction return
	- une condition ne peut avoir que des expressions comme fils : expression [<|>|==|...] expression
	
PROBLEMES RESOLUS :

	- la pile (Stack) de BSIM est trop petite pour les programmes longs ou très recursifs : elle devient debordee
	et des push se font dans le vide. Solution : nouvelle versiond de BSIM sur 64Ko au lieu de 500o (bsim-64K.jar)
	- l'utilisation d'un JMP(...), n'importe où dans le code, fait littéralement peter un cable a BSIM : il lance 
	une interrupted exception dès qu'il rencontre un HALT() (registre XP != 0) et revient à l'instruction 004, et
	boucle comme ça indéfiniment. Solution pas très propre mise en place : on a mis un HALT() à l'instruction 004.
	

	
//RP - 20 AVRIL

- generation d'une fonction recursive OK (testé mais pas sur l'exemple du prof car bof bof)
	- ATTENTION : trop de recursivité fait deborder la pile

- correction du problemme de bouclage infini : 
	- l'utilisation d'un JMP(...), n'importe où dans le code, fait littéralement peter un cable a BSIM : il lance 
	une interrupted exception dès qu'il rencontre un HALT() (registre XP != 0) et revient à l'instruction 004, et
	boucle comme ça indéfiniment. Solution pas très propre mise en place : on a mis un HALT() à l'instruction 004.

- generation des instructions WHILE-DO sur le meme principe que le if-then-else :
	- probleme de bouclage rencontré (retour a l'instruction 004 a cause de la présence
	d'un JMP)

- generation des instructions if-then-else :
	- utilisation des commandes CMPEQ/CMPLE/... et la commande XORC(R0,1,R0) (permet 
	d'inverser le bit dans R0). Voir doc du programme pour plus d'informations

//RP - 19 AVRIL

- la generation prend en compte correctement les variables locales :
	- ALLOCATE(nombre de var loc) au debut de l'appel, stockage/recuperation de valeur via
	PUTFRAME/GETFRAME

- correctif dans la creation de la TDS :
	- ajout du "rang" pour une variable globale (indispensable pour savoir vers quelle
	case de la pile pointer le GETFRAME/PUTFRAME)

-generation correcte d'une fonction (avec ou sans parametres) avec valeur de retour (return) :
	- la valeur de retour est sauvegardee en pile via un PUTFRAME sur la case allouée via
	le ALLOCATE lors de l'appel (avant que les parametres ne soient pushé et que les 
	variables globales ne soit allouées) => lorsque l'appel de fonction est terminé, on se
	retrouve avec la valeur de retour en sommet de pile (pratique lorsqu'on appelle une 
	fonction dans une expression (ex: a = f(10); )

- generation correcte d'une fonction avec parametres (gestion des GETFRAME/PUTFRAME)

- amelioration generation code:
	- amelioration des fonctions de generation de code et verification du code generé sur
	BSIM : les fichiers 03 - 04 sont OK


//RP - 17 AVRIL

- ajout des fonctions de generations assembleur:
	- generer_expression : genere une expression censée retourner un resultat (+),(*),(CALL),...
	- generer_affectation : genere une affectation a une variable (=)
	- generer_fonction1 : genere le code d'une fonction (FUNC)
	- generer_fonctions : genere le code de toutes les fonctions que contient la racine du
	programme
	- generer_data : genere le code des variables globales de la TDS
	- generer_le_code : genere le code total du programme en appelant les fonctions citees
	plus haut


//J - 16 AVRIL

- main analyse tous les fichiers tests et passe à un autre test s’il rencontre une erreur


//RP - 16 AVRIL

-modification des regles concernant les expression : expr_dyn et expr_const factorisés en un seul symbole expression
(la detection de s'il s'agit d'une expression de constante se fait dans le code java (e instanceof Integer)
Ceci afin d'eviter les problemes d'expressions mixtes et de conflits de grammaire.
-gestion complete des variables locales (definition d'une variable locale dans le bon contexte, appel de la bonne variable
en fonction du contexte d'appel)

- completion de la construction de l'arbre au niveau de prog ::= blabla 
- ajout des noeuds "definition de variables" dans l'arbre, ça serviva pour plus tard, pour définir les contextes
- creation des arbres pour iteration, condition, conditionnelle

-lancement d'exception lorsque deux variables de meme nom existent dans le meme contexte
-indique le numero de l'instruction pendant laquelle une exception se lance (erreur de syntaxe)
-ajout de l'attribut "tag" de noeud pour avoir le nom de la variable par exemple (essentiel
pour la correction de contexte des variables locales)
-ajout de fonction de controle semantiques:
	- verification des doubles declarations
	- gestion des variables non declarees
	- gestion des conflits de type void
	- gestion du cas ou il manque des parametres a l'appel d'une fonction
-lors d'un if/while, les noeuds fils etaient nommés "bla" => renommés en "then","else" / "do"
- modification de la grammaire de blabla pour autoriser un blabla vide (fonction ou code vide)


//RP - 15 AVRIL

- correction de l'ordre d'ajout des fils dans la regle blabla::= grace a la methode empilerFils

- creation de symboles expr_dyn et expr_const pour les expression dynamiques (incluant des variables/appels de fonctions)
et les expressions de constantes, calculable avant l'execution de l'arbre.
- modification du symbole TYPE en INT, puisque le programme ne devra gérer que des int
- la valeur d'un noeud passe du type String au type Integer, puisque la valeur d'un noeud sera soit son numero dans la TDS
pour une variable/fonction (IDF), ou sa valeur numerique pour une constante (CST). Tous les autres noeuds n'ont pas besoin
de valeur.
- amelioration de l'algo d'affichage de l'arbre
- certains symboles LEX ne retournent plus des noeuds mais la valeur de yytext(). Le code cup a donc été modifié en
conséquence.

//J- 14 AVRIL 

- Ajout d’une petite fonction qui affiche la TDS à la fin du main.
(pour vérifier que les insertions se font correctement, on ne sait
jamais…)


- Mise à jour de la grammaire pour définir une variable.
On n’utilise plus un tableau de string, mais une arraylist de
Noeud(« variable », x/y/etc..) , (un peu plus facile à utiliser ^^)
Ce qui permet de n’utiliser les « vars » (car « i,j,k,.. » ) uniquement
pour les définition de variable


- Affectation avec int.
On peut faire
a,b = 8;
b = 10;
un arbre est créer a chaque fois


Suite :
- la déclaration de plusieurs variable fonctionne
- et l’ajout dans le TDS se fait bien avec la valeur fournie (avant 0)


Gestion de la déclaration
- création d’une arraylist qui contient les fils du programme
- lorsque l’on déclare une variable du genre « int a = 7 » , l’arbre
généré est :
arbre_programme
/
=
/  \
a   7


//J- 13 AVRIL

- Mise à jour de la grammaire pour définir une variable.
-On n’utilise plus un tableau de string, mais une arraylist de
Noeud(« variable », x/y/etc..) , (un peu plus facile à utiliser ^^)
-Ce qui permet de n’utiliser les « vars » (car « i,j,k,.. » ) uniquement
pour les définition de variable


//R-P- FIRST COMIT' 

- Creation de la Grammaire
- Creation du Lex
- Creation TDS
- Debut creation de l'arbre


