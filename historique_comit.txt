//RP - 16 avril



-modification des regles concernant les expression : expr_dyn et expr_const factorisés en un seul symbole expression
(la detection de s'il s'agit d'une expression de constante se fait dans le code java (e instanceof Integer)
Ceci afin d'eviter les problemes d'expressions mixtes et de conflits de grammaire.
-gestion complete des variables locales (definition d'une variable locale dans le bon contexte, appel de la bonne variable
en fonction du contexte d'appel)

- completion de la construction de l'arbre au niveau de prog ::= blabla 
- ajout des noeuds "definition de variables" dans l'arbre, ça serviva pour plus tard, pour définir les contextes
- creation des arbres pour iteration, condition, conditionnelle

-lancement d'exception lorsque deux variables de meme nom existent dans le meme contexte
-indique le numero de l'instruction pendant laquelle une exception se lance (erreur de syntaxe)
-ajout de l'attribut "tag" de noeud pour avoir le nom de la variable par exemple (essentiel
pour la correction de contexte des variables locales)
-ajout de fonction de controle semantiques:
	- verification des doubles declarations
	- gestion des variables non declarees
	- gestion des conflits de type void
	- gestion du cas ou il manque des parametres a l'appel d'une fonction
-lors d'un if/while, les noeuds fils etaient nommés "bla" => renommés en "then","else" / "do"
- modification de la grammaire de blabla pour autoriser un blabla vide (fonction ou code vide)


//RP - 15 avril

- correction de l'ordre d'ajout des fils dans la regle blabla::= grace a la methode empilerFils

- creation de symboles expr_dyn et expr_const pour les expression dynamiques (incluant des variables/appels de fonctions)
et les expressions de constantes, calculable avant l'execution de l'arbre.
- modification du symbole TYPE en INT, puisque le programme ne devra gérer que des int
- la valeur d'un noeud passe du type String au type Integer, puisque la valeur d'un noeud sera soit son numero dans la TDS
pour une variable/fonction (IDF), ou sa valeur numerique pour une constante (CST). Tous les autres noeuds n'ont pas besoin
de valeur.
- amelioration de l'algo d'affichage de l'arbre
- certains symboles LEX ne retournent plus des noeuds mais la valeur de yytext(). Le code cup a donc été modifié en
conséquence.

//J- 14 Avril 

- Ajout d’une petite fonction qui affiche la TDS à la fin du main.
(pour vérifier que les insertions se font correctement, on ne sait
jamais…)


- Mise à jour de la grammaire pour définir une variable.
On n’utilise plus un tableau de string, mais une arraylist de
Noeud(« variable », x/y/etc..) , (un peu plus facile à utiliser ^^)
Ce qui permet de n’utiliser les « vars » (car « i,j,k,.. » ) uniquement
pour les définition de variable


- Affectation avec int.
On peut faire
a,b = 8;
b = 10;
un arbre est créer a chaque fois


Suite :
- la déclaration de plusieurs variable fonctionne
- et l’ajout dans le TDS se fait bien avec la valeur fournie (avant 0)


Gestion de la déclaration
- création d’une arraylist qui contient les fils du programme
- lorsque l’on déclare une variable du genre « int a = 7 » , l’arbre
généré est :
arbre_programme
/
=
/  \
a   7





//J- 13 Avril
- Mise à jour de la grammaire pour définir une variable.
-On n’utilise plus un tableau de string, mais une arraylist de
Noeud(« variable », x/y/etc..) , (un peu plus facile à utiliser ^^)
-Ce qui permet de n’utiliser les « vars » (car « i,j,k,.. » ) uniquement
pour les définition de variable





//R-P- First Comit' 

- Creation de la Grammaire
- Creation du Lex
- Creation TDS
- Debut creation de l'arbre


